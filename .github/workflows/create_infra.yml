name: Create Infrastructure with Terraform and Issues üöÄüîß

on:
  issues: 
    types: opened

defaults:
  run:
    working-directory: ./terraform

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.TF_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.TF_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.TF_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.TF_TENANT_ID }} 


jobs:
  validate_issue_forms:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Parse Issue
      id: parser
      uses: issue-ops/parser@v4.0.0
      with:
        body: ${{ github.event.issue.body }}
        issue-form-template	: create_azure_infra_form.yml
        workspace: ${{ github.workspace }}
    
    - name: Output Issue JSON
      id: output-issue
      run: echo ${{ steps.parser.outputs.json }}

    - name: Validate Issue
      id: validate
      uses: issue-ops/validator@v0.2.1
      with:
        issue-form-template: create_azure_infra_form.yml
        parsed-issue-body: ${{ steps.parser.outputs.json }}
        workspace: ${{ github.workspace }}

    - name: Convert Issue Form to Terraform.tfvars
      run:  echo '${{ steps.parser.outputs.json }}' | jq -r 'to_entries|map("\(.key)=\((if (.value | type) == "array" then .value[0] else .value end)|tostring)")|.[]' > terraform.tfvars

    - name: Add Labels
      id: add-labels
      uses: issue-ops/labeler@v2.1.0
      with:
        action: add
        issue_number: ${{ github.event.issue.number }}
        labels: |
          deploying
          azure
          terraform
          waiting-for-approvers

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: | 
        terraform init 

    - name: Terraform Plan
      run: | 
        terraform plan \
        -var "subscription_id=${{ secrets.TF_SUBSCRIPTION_ID }}"          

    - uses: actions/github-script@v6
        # if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })    